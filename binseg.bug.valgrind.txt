tdhock@recycled:~/projects/changepoint-data-structure(master*)$ R --vanilla -d valgrind < binseg.bug.R 
==2631== Memcheck, a memory error detector
==2631== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2631== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==2631== Command: /home/tdhock/lib/R/bin/exec/R --vanilla
==2631== 

R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> data("neuroblastoma", package="neuroblastoma")
> one <- subset(neuroblastoma$profiles, profile.id=="583" & chromosome=="3")
> for(i in 1:1){
+   print(i)
+   fit <- fpop::multiBinSeg(one$logratio, nrow(one))
+ }
[1] 1
==2631== Invalid read of size 4
==2631==    at 0xB20EE4E: Node::operator=(Node&) (Node.cpp:53)
==2631==    by 0xB20EC3D: Heap::RemoveHead() (Heap.cpp:84)
==2631==    by 0xB20E778: BinSeg_MultiDim::Initialize(int) (BinSeg_MultiDim.cpp:120)
==2631==    by 0xB20F0DA: BinSeg_interface(double*, int*, int*, int*, int*, double*) (Rwrappers.cc:50)
==2631==    by 0x4903E81: do_dotCode (dotcode.c:1764)
==2631==    by 0x4939FF7: bcEval (eval.c:6765)
==2631==    by 0x494675D: Rf_eval (eval.c:620)
==2631==    by 0x49485D7: R_execClosure (eval.c:1780)
==2631==    by 0x4949500: Rf_applyClosure (eval.c:1706)
==2631==    by 0x493D844: bcEval (eval.c:6733)
==2631==    by 0x494D98F: R_compileAndExecute (eval.c:1411)
==2631==    by 0x494DDE6: do_for (eval.c:2171)
==2631==  Address 0xb070444 is 20 bytes before a block of size 16,000 alloc'd
==2631==    at 0x4830F6B: operator new[](unsigned int) (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
==2631==    by 0xB20EA14: Heap::ReAllocate() (Heap.cpp:60)
==2631==    by 0xB20EBDC: Heap::AddNode(Node) (Heap.cpp:71)
==2631==    by 0xB20E7E6: BinSeg_MultiDim::Initialize(int) (BinSeg_MultiDim.cpp:133)
==2631==    by 0xB20F0DA: BinSeg_interface(double*, int*, int*, int*, int*, double*) (Rwrappers.cc:50)
==2631==    by 0x4903E81: do_dotCode (dotcode.c:1764)
==2631==    by 0x4939FF7: bcEval (eval.c:6765)
==2631==    by 0x494675D: Rf_eval (eval.c:620)
==2631==    by 0x49485D7: R_execClosure (eval.c:1780)
==2631==    by 0x4949500: Rf_applyClosure (eval.c:1706)
==2631==    by 0x493D844: bcEval (eval.c:6733)
==2631==    by 0x494D98F: R_compileAndExecute (eval.c:1411)
==2631== 
==2631== Invalid read of size 8
==2631==    at 0xB20EE50: Node::operator=(Node&) (Node.cpp:52)
==2631==    by 0xB20EC3D: Heap::RemoveHead() (Heap.cpp:84)
==2631==    by 0xB20E778: BinSeg_MultiDim::Initialize(int) (BinSeg_MultiDim.cpp:120)
==2631==    by 0xB20F0DA: BinSeg_interface(double*, int*, int*, int*, int*, double*) (Rwrappers.cc:50)
==2631==    by 0x4903E81: do_dotCode (dotcode.c:1764)
==2631==    by 0x4939FF7: bcEval (eval.c:6765)
==2631==    by 0x494675D: Rf_eval (eval.c:620)
==2631==    by 0x49485D7: R_execClosure (eval.c:1780)
==2631==    by 0x4949500: Rf_applyClosure (eval.c:1706)
==2631==    by 0x493D844: bcEval (eval.c:6733)
==2631==    by 0x494D98F: R_compileAndExecute (eval.c:1411)
==2631==    by 0x494DDE6: do_for (eval.c:2171)
==2631==  Address 0xb070448 is 16 bytes before a block of size 16,000 alloc'd
==2631==    at 0x4830F6B: operator new[](unsigned int) (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
==2631==    by 0xB20EA14: Heap::ReAllocate() (Heap.cpp:60)
==2631==    by 0xB20EBDC: Heap::AddNode(Node) (Heap.cpp:71)
==2631==    by 0xB20E7E6: BinSeg_MultiDim::Initialize(int) (BinSeg_MultiDim.cpp:133)
==2631==    by 0xB20F0DA: BinSeg_interface(double*, int*, int*, int*, int*, double*) (Rwrappers.cc:50)
==2631==    by 0x4903E81: do_dotCode (dotcode.c:1764)
==2631==    by 0x4939FF7: bcEval (eval.c:6765)
==2631==    by 0x494675D: Rf_eval (eval.c:620)
==2631==    by 0x49485D7: R_execClosure (eval.c:1780)
==2631==    by 0x4949500: Rf_applyClosure (eval.c:1706)
==2631==    by 0x493D844: bcEval (eval.c:6733)
==2631==    by 0x494D98F: R_compileAndExecute (eval.c:1411)
==2631== 
==2631== Invalid read of size 4
==2631==    at 0xB20EE53: Node::operator=(Node&) (Node.cpp:54)
==2631==    by 0xB20EC3D: Heap::RemoveHead() (Heap.cpp:84)
==2631==    by 0xB20E778: BinSeg_MultiDim::Initialize(int) (BinSeg_MultiDim.cpp:120)
==2631==    by 0xB20F0DA: BinSeg_interface(double*, int*, int*, int*, int*, double*) (Rwrappers.cc:50)
==2631==    by 0x4903E81: do_dotCode (dotcode.c:1764)
==2631==    by 0x4939FF7: bcEval (eval.c:6765)
==2631==    by 0x494675D: Rf_eval (eval.c:620)
==2631==    by 0x49485D7: R_execClosure (eval.c:1780)
==2631==    by 0x4949500: Rf_applyClosure (eval.c:1706)
==2631==    by 0x493D844: bcEval (eval.c:6733)
==2631==    by 0x494D98F: R_compileAndExecute (eval.c:1411)
==2631==    by 0x494DDE6: do_for (eval.c:2171)
==2631==  Address 0xb070450 is 8 bytes before a block of size 16,000 alloc'd
==2631==    at 0x4830F6B: operator new[](unsigned int) (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
==2631==    by 0xB20EA14: Heap::ReAllocate() (Heap.cpp:60)
==2631==    by 0xB20EBDC: Heap::AddNode(Node) (Heap.cpp:71)
==2631==    by 0xB20E7E6: BinSeg_MultiDim::Initialize(int) (BinSeg_MultiDim.cpp:133)
==2631==    by 0xB20F0DA: BinSeg_interface(double*, int*, int*, int*, int*, double*) (Rwrappers.cc:50)
==2631==    by 0x4903E81: do_dotCode (dotcode.c:1764)
==2631==    by 0x4939FF7: bcEval (eval.c:6765)
==2631==    by 0x494675D: Rf_eval (eval.c:620)
==2631==    by 0x49485D7: R_execClosure (eval.c:1780)
==2631==    by 0x4949500: Rf_applyClosure (eval.c:1706)
==2631==    by 0x493D844: bcEval (eval.c:6733)
==2631==    by 0x494D98F: R_compileAndExecute (eval.c:1411)
==2631== 
==2631== Invalid read of size 4
==2631==    at 0xB20EE56: Node::operator=(Node&) (Node.cpp:55)
==2631==    by 0xB20EC3D: Heap::RemoveHead() (Heap.cpp:84)
==2631==    by 0xB20E778: BinSeg_MultiDim::Initialize(int) (BinSeg_MultiDim.cpp:120)
==2631==    by 0xB20F0DA: BinSeg_interface(double*, int*, int*, int*, int*, double*) (Rwrappers.cc:50)
==2631==    by 0x4903E81: do_dotCode (dotcode.c:1764)
==2631==    by 0x4939FF7: bcEval (eval.c:6765)
==2631==    by 0x494675D: Rf_eval (eval.c:620)
==2631==    by 0x49485D7: R_execClosure (eval.c:1780)
==2631==    by 0x4949500: Rf_applyClosure (eval.c:1706)
==2631==    by 0x493D844: bcEval (eval.c:6733)
==2631==    by 0x494D98F: R_compileAndExecute (eval.c:1411)
==2631==    by 0x494DDE6: do_for (eval.c:2171)
==2631==  Address 0xb070454 is 4 bytes before a block of size 16,000 alloc'd
==2631==    at 0x4830F6B: operator new[](unsigned int) (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
==2631==    by 0xB20EA14: Heap::ReAllocate() (Heap.cpp:60)
==2631==    by 0xB20EBDC: Heap::AddNode(Node) (Heap.cpp:71)
==2631==    by 0xB20E7E6: BinSeg_MultiDim::Initialize(int) (BinSeg_MultiDim.cpp:133)
==2631==    by 0xB20F0DA: BinSeg_interface(double*, int*, int*, int*, int*, double*) (Rwrappers.cc:50)
==2631==    by 0x4903E81: do_dotCode (dotcode.c:1764)
==2631==    by 0x4939FF7: bcEval (eval.c:6765)
==2631==    by 0x494675D: Rf_eval (eval.c:620)
==2631==    by 0x49485D7: R_execClosure (eval.c:1780)
==2631==    by 0x4949500: Rf_applyClosure (eval.c:1706)
==2631==    by 0x493D844: bcEval (eval.c:6733)
==2631==    by 0x494D98F: R_compileAndExecute (eval.c:1411)
==2631== 
> 
==2631== 
==2631== HEAP SUMMARY:
==2631==     in use at exit: 178,682,223 bytes in 11,802 blocks
==2631==   total heap usage: 52,345 allocs, 40,543 frees, 505,876,960 bytes allocated
==2631== 
==2631== LEAK SUMMARY:
==2631==    definitely lost: 0 bytes in 0 blocks
==2631==    indirectly lost: 0 bytes in 0 blocks
==2631==      possibly lost: 0 bytes in 0 blocks
==2631==    still reachable: 178,682,223 bytes in 11,802 blocks
==2631==                       of which reachable via heuristic:
==2631==                         newarray           : 3,880 bytes in 1 blocks
==2631==         suppressed: 0 bytes in 0 blocks
==2631== Rerun with --leak-check=full to see details of leaked memory
==2631== 
==2631== For counts of detected and suppressed errors, rerun with: -v
==2631== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
tdhock@recycled:~/projects/changepoint-data-structure(master*)$ 
